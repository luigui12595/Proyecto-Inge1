@model ProyectoInge1.Models.ModReqFuncionalInter

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Requerimientos Funcionales</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Crear</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <!--AGREGAR UN ID DE REQUERIMIENTO-->
        <label class="control-label col-md-2">id</label>
        <div class="col-md-10">
            <div class="form-group">
               
                @Html.EditorFor(model => model.Requerimientos.id , new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Requerimientos.id, "", new { @class = "text-danger" })
           </div>
             </div>

            <!--AGREGAR UN PROYECTO DE REQUERIMIENTO-->
            <div class="form-group">
                <label class="control-label col-md-2">proyecto</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Requerimientos.nomProyecto, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Requerimientos.nomProyecto, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Nombre:</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Requerimientos.nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Requerimientos.nombre, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Sprint:</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Requerimientos.sprint, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Requerimientos.sprint, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Modulo:</label>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Requerimientos.modulo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Requerimientos.modulo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Descripcion:</label>
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Requerimientos.descripcion, new { @class = "form-control", rows = "4"  })
                    @Html.ValidationMessageFor(model => model.Requerimientos.descripcion, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Observaciones:</label>
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Requerimientos.observaciones, new { @class = "form-control", rows = "4" })
                    @Html.ValidationMessageFor(model => model.Requerimientos.observaciones, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Imagen:</label>
                <div class="editor-field">
                    <input id="ImagePath" title="Upload a product image"
                           type="file" name="file" />
                    <!--Html.TextAreaFor(model => model.RequerimientosF.imagen , new { htmlAttributes = new { class = "form-control" } })-->
                    @Html.ValidationMessageFor(model => model.Requerimientos.imagen, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Fuente:</label>
                <div class="col-md-10">
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Responsable 1:</label>
                <div class="col-md-10">
                    <!--Html.EditorFor(model => model , new { htmlAttributes = new { class = "form-control" } })
                Html.ValidationMessageFor(model => model.modulo, "", new { class = "text-danger" })-->

                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Responsable 2:</label>
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.Usuarios.nombre)
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-md-2">Fecha Inicial:</label>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Requerimientos.fechaInicial, new { @class = "form-control datepicker", placeholder = "DATE" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Fecha Final:</label>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Requerimientos.fechaFinal, new { @class = "form-control datepicker2", placeholder = "DATE" })
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Criterios:</label>
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.criterios.idReqFunc, new { @class = "form-control", rows = "4" })
                    @Html.ValidationMessageFor(model => model.criterios.criterio, "", new { @class = "text-danger" })
                </div>
            </div>
        <div class="form-group">
            <label class="control-label col-md-2">Criterios:</label>
            <div class="col-md-10">
                <input type="text" id="output"><br />
                <button onclick="add_textbox()">nuevo criterio</button>
                <button onclick="load_all()">Load All</button>
                <div id="textboxes">
                    </div>
                </div>
        </div>

          <!--  <form action="demo_form.asp">
                Criterio: <input type="text" id="output" value=" a|b|c|d"><br/>

            </form>
            <button onclick="listar()">Try it</button>
            <script>
                var c = [];
                var t;
                document.getElementById("demo").innerHTML = c;

                function listar() {
                    t = "VVV";
                    c.push(t, "<button> Cambiar </button>  <button> Eliminiar </button>  <br> ");
                    document.getElementById("demo").innerHTML = c;
                }
            </script>-->
            <div class="form-group">
                <div class="col-md-offset-2 col-md-5">
                    <input type="submit" value="Aceptar" class="btn btn-primary" />
                    <div class="btn btn-danger" style="color:white;" />
                    @Html.ActionLink("Cancelar", "Index", null, new { @style = "color:#FFFFFF;" })
                </div>
            </div>
            <!-- <div class="col-md-offset-2 col-md-5">-->



        </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
                        $(function () {
                            $('.datepicker, .datepicker2').datepicker("setDate", new Date()); //Initialise any date pickers
                        });
                        $(".datepicker").on("dp.change", function (e) {
                            $('.datepicker2').data("DatePicker").setMinDate(e.date);
                        });
                        $(".datepicker2").on("dp.change", function (e) {
                            $('.datepicker').data("DatePicker").setMaxDate(e.date);
                        });

                        i = 0;

                        function update_output() {
                            var values = $(".multitextbox")
                                      .map(function () { return $(this).val(); }).get().filter(v=>v != '').join(";");
                            $("#output").val(values);
                        }

                        function delete_all(button) {
                            $("#" + button.className).remove();
                            update_output();
                        }

                        function add_textbox() {
                            $("#textboxes").append("<div id='textbox" + i + "'><input type='text' class='multitextbox multitextbox" + i + "' oninput=update_output()> <button onclick='delete_all(this)' class= textbox" + i + ">x</button> <br/> </div>");
                            var tbid = "multitextbox" + i;
                            i++;

                            return tbid;
                        }

                        function load_all() {
                            var inputs = $("#output").val().split(";");
                            for (var j = 0; j < inputs.length; j++) {
                                var tbid = add_textbox();
                                console.log("." + tbid)
                                $("." + tbid).val(inputs[j]);
                            }
                        }

                        window.onload = load_all

    </script>

}
